package gen

import (
	"reflect"
	"strings"
	"testing"
)

func TestParseFile(t *testing.T) {
	tests := []struct {
		title  string
		path   string
		target []string
		file   File
		err    bool
	}{
		{title: "all", path: "testdata/foo_bar_baz.go", file: File{
			PackageName: "testdata",
			Imports: []Import{
				{Name: "t", Path: `"time"`},
			},
			Structs: []Struct{
				{Name: "Foo", Fields: []Field{
					{Names: []string{"ID"}, Type: "int"},
					{Names: []string{"CreatedAt"}, Type: "t.Time"},
					{Names: []string{"UpdatedAt"}, Type: "t.Time"},
				}},
				{Name: "Bar", Fields: []Field{
					{Names: []string{"ID"}, Type: "int"},
					{Names: []string{"CreatedAt"}, Type: "t.Time"},
					{Names: []string{"UpdatedAt"}, Type: "t.Time"},
				}},
				{Name: "Baz", Fields: []Field{
					{Names: []string{"ID"}, Type: "int"},
					{Names: []string{"CreatedAt"}, Type: "t.Time"},
					{Names: []string{"UpdatedAt"}, Type: "t.Time"},
				}},
			},
		}},
		{title: "limit to Foo and Baz", path: "testdata/foo_bar_baz.go", target: []string{"Foo", "Baz"}, file: File{
			PackageName: "testdata",
			Imports: []Import{
				{Name: "t", Path: `"time"`},
			},
			Structs: []Struct{
				{Name: "Foo", Fields: []Field{
					{Names: []string{"ID"}, Type: "int"},
					{Names: []string{"CreatedAt"}, Type: "t.Time"},
					{Names: []string{"UpdatedAt"}, Type: "t.Time"},
				}},
				{Name: "Baz", Fields: []Field{
					{Names: []string{"ID"}, Type: "int"},
					{Names: []string{"CreatedAt"}, Type: "t.Time"},
					{Names: []string{"UpdatedAt"}, Type: "t.Time"},
				}},
			},
		}},
		{
			title: "non Go file",
			path:  "testdata/test.txt",
			err:   true,
		},
	}

	for _, test := range tests {
		t.Run(test.title, func(t *testing.T) {
			f, err := ParseFile(test.path, test.target...)
			if test.err != (err != nil) {
				t.Errorf("error: %v", err)
			}
			if !reflect.DeepEqual(test.file, f) {
				t.Errorf("got %v, want %v", f, test.file)
			}
		})
	}
}

func TestFile_WriteTo(t *testing.T) {
	tests := []struct {
		title string
		file  File
		out   string
		err   bool
	}{
		{
			title: "minimal",
			file:  File{PackageName: "test"},
			out: `// Code generated by soagen; DO NOT EDIT.
package test
`,
		},
		{
			title: "invalid package name",
			file:  File{PackageName: "123"},
			err:   true,
		},
	}

	for _, test := range tests {
		t.Run(test.title, func(t *testing.T) {
			var sb strings.Builder
			_, err := test.file.WriteTo(&sb)
			if test.err != (err != nil) {
				t.Errorf("error: %v", err)
			}
			if got, want := sb.String(), test.out; got != want {
				t.Errorf("got %v, want %v", got, want)
			}
		})
	}
}
