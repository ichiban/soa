// Code generated by soagen; DO NOT EDIT.
package {{.PackageName}}

import (
    "slices"
    {{- range .Imports}}
    {{.Name}} {{.Path}}
    {{- end}}
)

{{- range .Structs}}
type {{.SliceName}} struct {
    {{- range .Fields}}
    {{join .Names ", "}} []{{.Type}}
    {{- end}}
}

func (s {{.SliceName}}) Get(i int) {{.Name}} {
    var t {{.Name}}
    {{- range .Fields}}
    {{- range .Names}}
    t.{{.}} = s.{{.}}[i]
    {{- end}}
    {{- end}}
    return t
}

func (s {{.SliceName}}) Set(i int, t {{.Name}}) {
    {{- range .Fields}}
    {{- range .Names}}
    s.{{.}}[i] = t.{{.}}
    {{- end}}
    {{- end}}
}

func (s {{.SliceName}}) Len() int {
    return min(
    {{- range .Fields}}
    {{- range .Names}}
        len(s.{{.}}),
    {{- end}}
    {{- end}}
    )
}

func (s {{.SliceName}}) Cap() int {
    return min(
    {{- range .Fields}}
    {{- range .Names}}
        cap(s.{{.}}),
    {{- end}}
    {{- end}}
    )
}

func (s {{.SliceName}}) Slice(low, high, max int) {{.SliceName}} {
    return {{.SliceName}}{
        {{- range .Fields}}
        {{- range .Names}}
        {{.}}: s.{{.}}[low:high:max],
        {{- end}}
        {{- end}}
    }
}

func (s {{.SliceName}}) Grow(n int) {{.SliceName}} {
    return {{.SliceName}}{
        {{- range .Fields}}
        {{- range .Names}}
        {{.}}: slices.Grow(s.{{.}}, n),
        {{- end}}
        {{- end}}
    }
}
{{- end}}